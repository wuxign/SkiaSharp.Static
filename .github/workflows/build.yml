name: build
on:
  push:
    paths:
      - ".github/workflows/**"
      - ".github/actions/**"
      - "args.gn"
env:
  SkiaSharpVersion: 2.88.9
jobs:
  build:
    runs-on: windows-2025
    permissions:
      id-token: write
      attestations: write
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup

      - name: Create Dir
        shell: bash
        run: |
          mkdir -p skiasharp
          mkdir -p out/windows/x86
          mv args.gn out/windows/x86

      - name: Clone source
        working-directory: ${{github.workspace}}
        shell: pwsh
        run: |
          cd skiasharp
          git init && git remote add origin https://github.com/mono/SkiaSharp.git
          git fetch --depth 1 origin release/$env:SkiaSharpVersion
          git checkout --recurse-submodules -q FETCH_HEAD
          git submodule update --init --depth 1

      - name: Restore source cache
        uses: actions/cache/restore@v4
        id: restore-src-cache
        with:
          path: |
            skiasharp/externals/skia/third_party
          key: ${{ runner.os }}-src-cache-${{ env.SkiaSharpVersion }}

      - name: Prepare build skia
        working-directory: ${{github.workspace}}
        shell: pwsh
        # Python 3.13 removed 'pipes' module, so we use 3.12 instead.
        run: |
          cd skiasharp\externals\skia
          uv run --python 3.12 -- python tools\git-sync-deps
          $outDir = Join-Path $env:GITHUB_WORKSPACE "out\windows\x86"
          gn gen "$outDir"

      - name: Save src cache immediately
        id: save-src-cache
        if: always() && steps.restore-src-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.restore-src-cache.outputs.cache-primary-key }}
          path: |
            skiasharp/externals/skia/third_party

      - name: Build skia
        working-directory: ${{github.workspace}}
        shell: pwsh
        run: |
          $outDir = "out\windows\x86"
          Write-Host "Changing to output directory: $outDir"
          cd $outDir
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Files in directory:"
          Get-ChildItem | Format-Table Name
          if (Test-Path "build.ninja") {
            Write-Host "Running ninja build..."
            # Try different ninja approaches
            $ninjaFound = $false
            
            # Method 1: Try ninja.exe directly
            if (Get-Command "ninja.exe" -ErrorAction SilentlyContinue) {
              Write-Host "Using ninja.exe directly"
              try {
                & ninja.exe skia SkiaSharp
                $ninjaFound = $true
              } catch {
                Write-Host "ninja.exe failed: $_"
              }
            }
            
            # Method 2: Try system ninja
            if (-not $ninjaFound -and (Get-Command "ninja" -ErrorAction SilentlyContinue)) {
              Write-Host "Using system ninja"
              try {
                & ninja skia SkiaSharp
                $ninjaFound = $true
              } catch {
                Write-Host "System ninja failed: $_"
              }
            }
            
            # Method 3: Try to find ninja in depot_tools directory
            if (-not $ninjaFound) {
              $depotToolsNinja = Join-Path $env:GITHUB_WORKSPACE "depot_tools\ninja.exe"
              if (Test-Path $depotToolsNinja) {
                Write-Host "Using depot_tools ninja.exe at: $depotToolsNinja"
                try {
                  & "$depotToolsNinja" skia SkiaSharp
                  $ninjaFound = $true
                } catch {
                  Write-Host "depot_tools ninja.exe failed: $_"
                }
              }
            }
            
            if (-not $ninjaFound) {
              Write-Error "All ninja methods failed"
              exit 1
            }
          } else {
            Write-Error "build.ninja not found"
            exit 1
          }

      - name: Build libHarfBuzzSharp
        working-directory: ${{github.workspace}}
        shell: pwsh
        run: |
          cd skiasharp\native\windows\libHarfBuzzSharp
          msbuild -m -t:rebuild -p:"Configuration=Release;Platform=x86;ConfigurationType=StaticLibrary;WindowsTargetPlatformVersion=$env:UCRTVersion;PlatformToolset=v143"

      - name: Package libSkiaSharp
        working-directory: ${{github.workspace}}
        shell: bash
        run: |
          cd out/windows/x86
          ls
          7z a -y -mx9 $SkiaSharpName.7z skia.lib SkiaSharp.lib
          mv $SkiaSharpName.7z $GITHUB_WORKSPACE

      - name: Package libHarfBuzzSharp
        working-directory: ${{github.workspace}}
        shell: bash
        run: |
          cd skiasharp/native/windows/libHarfBuzzSharp/bin/x86/Release
          7z a -y -mx9 $HarfBuzzSharpName.7z ./libHarfBuzzSharp.*
          mv $HarfBuzzSharpName.7z $GITHUB_WORKSPACE

      - uses: ./.github/actions/deploy
