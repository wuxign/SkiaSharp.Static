name: Build action
description: Build action
runs:
  using: "composite"
  steps:
    - name: Create Dir
      shell: nu {0}
      run: |
        mkdir skiasharp $env.BuildDir
        if $env.Architecture == "x86" {
            mv args.gn86 $"($env.BuildDir)/args.gn"
        } else {
            mv args.gn $env.BuildDir
        }

    - name: Clone source
      shell: nu {0}
      run: |
        cd skiasharp
        git init
        git remote add origin https://github.com/mono/SkiaSharp.git
        git fetch --depth 1 origin $"release/($env.SkiaSharpVersion)"
        git checkout --recurse-submodules -q FETCH_HEAD
        git submodule update --init --depth 1

    - name: Restore source cache
      uses: actions/cache/restore@v4
      id: restore-src-cache
      with:
        path: |
          skiasharp/externals/skia/third_party
        key: ${{ runner.os }}-src-cache-${{ env.SkiaSharpVersion }}

    - name: Prepare build skia
      shell: nu {0}
      # Python 3.13 removed 'pipes' module, so we use 3.12 instead.
      run: |
        cd skiasharp/externals/skia
        uv run --python 3.12 -- python tools/git-sync-deps
        gn gen $env.BuildDir

    - name: Save src cache immediately
      id: save-src-cache
      if: always() && steps.restore-src-cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        key: ${{ steps.restore-src-cache.outputs.cache-primary-key }}
        path: |
          skiasharp/externals/skia/third_party

    - name: Build skia
      shell: nu {0}
      run: |
        cd skiasharp/externals/skia
        autoninja -C $env.BuildDir skia SkiaSharp

    - name: Build libHarfBuzzSharp
      shell: nu {0}
      working-directory: ${{github.workspace}}
      run: |
        cd skiasharp/native/windows/libHarfBuzzSharp

        let platform = if $env.Architecture == "x86" { "Win32" } else { "x64" }
        
        let msbuild_record = {
            Configuration: "Release"
            Platform: $platform
            ConfigurationType: "StaticLibrary"
            WindowsTargetPlatformVersion: $env.UCRTVersion
            PlatformToolset: "v143"
            OutDir: $env.BuildDir
        }

        let msbuild_props = $msbuild_record | items {|key, value| $"($key)=($value)" } | str join ";"

        msbuild -m -t:rebuild -p:($msbuild_props)

    - name: Package libSkiaSharp
      shell: nu {0}
      working-directory: ${{env.BuildDir}}
      run: |
        ls
        7z a -y -mx9 $"($env.SkiaSharpName).7z" skia.lib SkiaSharp.lib
        mv $"($env.SkiaSharpName).7z" $env.GITHUB_WORKSPACE

    - name: Package libHarfBuzzSharp
      shell: nu {0}
      working-directory: ${{env.BuildDir}}
      run: |
        7z a -y -mx9 $"($env.HarfBuzzSharpName).7z" ./libHarfBuzzSharp.*
        mv $"($env.HarfBuzzSharpName).7z" $env.GITHUB_WORKSPACE
